{
  "version": 3,
  "sources": ["../../../src/assets/js/nav.js"],
  "sourcesContent": ["// Select DOM elements\nconst bodyElement = document.querySelector(\"body\");\nconst navbarMenu = document.querySelector(\"#cs-navigation\");\nconst hamburgerMenu = document.querySelector(\"#cs-navigation .cs-toggle\");\n\n// Function to toggle the aria-expanded attribute\nfunction toggleAriaExpanded(element) {\n    const isExpanded = element.getAttribute(\"aria-expanded\");\n    element.setAttribute(\n        \"aria-expanded\",\n        isExpanded === \"false\" ? \"true\" : \"false\",\n    );\n}\n\n// Function to toggle the menu open or closed\nfunction toggleMenu() {\n    hamburgerMenu.classList.toggle(\"cs-active\");\n    navbarMenu.classList.toggle(\"cs-active\");\n    bodyElement.classList.toggle(\"cs-open\");\n    toggleAriaExpanded(hamburgerMenu);\n}\n\n// Add click event listener to the hamburger menu\nhamburgerMenu.addEventListener(\"click\", toggleMenu);\n\n// Add click event listener to the navbar menu to handle clicks on the pseudo-element\nnavbarMenu.addEventListener(\"click\", function (event) {\n    if (\n        event.target === navbarMenu &&\n        navbarMenu.classList.contains(\"cs-active\")\n    ) {\n        toggleMenu();\n    }\n});\n\n// Function to handle dropdown toggle\nfunction toggleDropdown(element) {\n    element.classList.toggle(\"cs-active\");\n    const dropdownButton = element.querySelector(\".cs-dropdown-button\");\n    if (dropdownButton) {\n        toggleAriaExpanded(dropdownButton);\n    }\n}\n\n// Add event listeners to each dropdown element for accessibility\nconst dropdownElements = document.querySelectorAll(\".cs-dropdown\");\ndropdownElements.forEach((element) => {\n    let escapePressed = false;\n\n    element.addEventListener(\"focusout\", function (event) {\n        // Skip the focusout logic if escape was pressed\n        if (escapePressed) {\n            escapePressed = false;\n            return;\n        }\n\n        // If the focus has moved outside the dropdown, remove the active class from the dropdown\n        if (!element.contains(event.relatedTarget)) {\n            element.classList.remove(\"cs-active\");\n            const dropdownButton = element.querySelector(\".cs-dropdown-button\");\n\n            if (dropdownButton) {\n                toggleAriaExpanded(dropdownButton);\n            }\n        }\n    });\n\n    element.addEventListener(\"keydown\", function (event) {\n        if (element.classList.contains(\"cs-active\")) {\n            event.stopPropagation();\n        }\n\n        // Pressing Enter or Space will toggle the dropdown and adjust the aria-expanded attribute\n        if (event.key === \"Enter\" || event.key === \" \") {\n            event.preventDefault();\n            toggleDropdown(element);\n        }\n\n        // Pressing Escape will remove the active class from the dropdown. The stopPropagation above will stop the hamburger menu from closing\n        if (event.key === \"Escape\") {\n            escapePressed = true;\n            toggleDropdown(element);\n        }\n    });\n\n    // Handles dropdown menus on mobile - the matching media query (max-width: 63.9375rem) is necessary so that clicking the dropdown button on desktop does not add the active class and thus interfere with the hover state\n    const maxWidthMediaQuery = window.matchMedia(\"(max-width: 63.9375rem)\");\n    if (maxWidthMediaQuery.matches) {\n        element.addEventListener(\"click\", () => toggleDropdown(element));\n    }\n});\n\n// Pressing Enter will redirect to the href\nconst dropdownLinks = document.querySelectorAll(\".cs-drop-li > .cs-li-link\");\ndropdownLinks.forEach((link) => {\n    link.addEventListener(\"keydown\", function (event) {\n        if (event.key === \"Enter\") {\n            window.location.href = this.href;\n        }\n    });\n});\n\n// If you press Escape and the hamburger menu is open, close it\ndocument.addEventListener(\"keydown\", (event) => {\n    if (\n        event.key === \"Escape\" &&\n        hamburgerMenu.classList.contains(\"cs-active\")\n    ) {\n        toggleMenu();\n    }\n});\n"],
  "mappings": ";;AACA,MAAM,cAAc,SAAS,cAAc,MAAM;AACjD,MAAM,aAAa,SAAS,cAAc,gBAAgB;AAC1D,MAAM,gBAAgB,SAAS,cAAc,2BAA2B;AAGxE,WAAS,mBAAmB,SAAS;AACjC,UAAM,aAAa,QAAQ,aAAa,eAAe;AACvD,YAAQ;AAAA,MACJ;AAAA,MACA,eAAe,UAAU,SAAS;AAAA,IACtC;AAAA,EACJ;AAGA,WAAS,aAAa;AAClB,kBAAc,UAAU,OAAO,WAAW;AAC1C,eAAW,UAAU,OAAO,WAAW;AACvC,gBAAY,UAAU,OAAO,SAAS;AACtC,uBAAmB,aAAa;AAAA,EACpC;AAGA,gBAAc,iBAAiB,SAAS,UAAU;AAGlD,aAAW,iBAAiB,SAAS,SAAU,OAAO;AAClD,QACI,MAAM,WAAW,cACjB,WAAW,UAAU,SAAS,WAAW,GAC3C;AACE,iBAAW;AAAA,IACf;AAAA,EACJ,CAAC;AAGD,WAAS,eAAe,SAAS;AAC7B,YAAQ,UAAU,OAAO,WAAW;AACpC,UAAM,iBAAiB,QAAQ,cAAc,qBAAqB;AAClE,QAAI,gBAAgB;AAChB,yBAAmB,cAAc;AAAA,IACrC;AAAA,EACJ;AAGA,MAAM,mBAAmB,SAAS,iBAAiB,cAAc;AACjE,mBAAiB,QAAQ,CAAC,YAAY;AAClC,QAAI,gBAAgB;AAEpB,YAAQ,iBAAiB,YAAY,SAAU,OAAO;AAElD,UAAI,eAAe;AACf,wBAAgB;AAChB;AAAA,MACJ;AAGA,UAAI,CAAC,QAAQ,SAAS,MAAM,aAAa,GAAG;AACxC,gBAAQ,UAAU,OAAO,WAAW;AACpC,cAAM,iBAAiB,QAAQ,cAAc,qBAAqB;AAElE,YAAI,gBAAgB;AAChB,6BAAmB,cAAc;AAAA,QACrC;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,YAAQ,iBAAiB,WAAW,SAAU,OAAO;AACjD,UAAI,QAAQ,UAAU,SAAS,WAAW,GAAG;AACzC,cAAM,gBAAgB;AAAA,MAC1B;AAGA,UAAI,MAAM,QAAQ,WAAW,MAAM,QAAQ,KAAK;AAC5C,cAAM,eAAe;AACrB,uBAAe,OAAO;AAAA,MAC1B;AAGA,UAAI,MAAM,QAAQ,UAAU;AACxB,wBAAgB;AAChB,uBAAe,OAAO;AAAA,MAC1B;AAAA,IACJ,CAAC;AAGD,UAAM,qBAAqB,OAAO,WAAW,yBAAyB;AACtE,QAAI,mBAAmB,SAAS;AAC5B,cAAQ,iBAAiB,SAAS,MAAM,eAAe,OAAO,CAAC;AAAA,IACnE;AAAA,EACJ,CAAC;AAGD,MAAM,gBAAgB,SAAS,iBAAiB,2BAA2B;AAC3E,gBAAc,QAAQ,CAAC,SAAS;AAC5B,SAAK,iBAAiB,WAAW,SAAU,OAAO;AAC9C,UAAI,MAAM,QAAQ,SAAS;AACvB,eAAO,SAAS,OAAO,KAAK;AAAA,MAChC;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AAGD,WAAS,iBAAiB,WAAW,CAAC,UAAU;AAC5C,QACI,MAAM,QAAQ,YACd,cAAc,UAAU,SAAS,WAAW,GAC9C;AACE,iBAAW;AAAA,IACf;AAAA,EACJ,CAAC;",
  "names": []
}
